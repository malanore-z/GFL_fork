# ==========logging配置文件==========

# 定义logger模块，root是父类，必须存在。keys可以有多个，以逗号隔开
# 在需要使用logging模块的py文件中，通过logging.getLogger(name)来获取logger对象。
# 比如logger = logging.getLogger('GflLogger')
# 如果name为loggers里面keys的值，则调用对应的配置，如果name没有则调用默认（root)的配置
# loggers默认的父对象是root，非占位对象，某个对象打日志时，父对象也会收到日志，并再打一次。
[loggers]
keys=root,node_logger

# ==========实现logger对应的配置信息==========

# 必须是 logger_name  name为loggers中key的值
# level：日志级别，包括：CRITICAL，ERROR，WARNING，INFO，DEBUG
# handlers：日志处理器，可以有多个，以逗号隔开
# qualname：logger的名称，通过logging.getLogger(name)获取
# 如果获取的logger名称不存在，则调用默认（root)logger
# propagate：是否继承父类的配置信息，0：否 1：是
[logger_root]
level=DEBUG
handlers=consoleHandler
qualname=root

[logger_node_logger]
level=DEBUG
handlers=consoleHandler,debug_file_Handler,info_file_Handler,warn_file_Handler,error_file_Handler
qualname=node_logger
propagate=0

# ==========handlers的具体配置实现==========
# Handlers将logger发过来的信息进行准确地分配，以下包括控制台、文件；
# 一个logger可以拥有多个handler。
[handlers]
keys=consoleHandler,debug_file_Handler,info_file_Handler,warn_file_Handler,error_file_Handler

# 必须是"handler_name"，其中name为handlers中keys的值
[handler_consoleHandler]
# class为logging包里面的handler处理器，要写完整的包名
class=StreamHandler
level=INFO
# formatter：日志输入格式
formatter=form01
# args：handler相关参数
args=(sys.stdout,)

[handler_debug_file_Handler]
class=FileHandler
level=DEBUG
formatter=form01
# 可以设置保存日志的路径
args=('./node/debug.log', 'a')

[handler_info_file_Handler]
class=FileHandler
level=INFO
formatter=form01
# 可以设置保存日志的路径
args=('./node/info.log', 'a')

[handler_warn_file_Handler]
class=FileHandler
level=WARNING
formatter=form01
# 可以设置保存日志的路径
args=('./node/warn.log', 'a')

[handler_error_file_Handler]
class=FileHandler
level=ERROR
formatter=form01
# 可以设置保存日志的路径
args=('./node/error.log', 'a')

# ==========日志输出格式化实现==========
# datefmt 日期格式 对应asctime
# ----------------------------
# 日志格式
# ----------------------------
# %(asctime)s      年-月-日 时-分-秒，毫秒
# %(pathname)s     目录名，完整路径
# %(filename)s     pathname中的文件名，不含目录
# %(funcName)s     函数名
# %(levelname)s    级别名
# %(lineno)d       行号
# %(module)s       模块名
# %(message)s      日志信息
# %(name)s         日志模块名
# %(process)d      进程id
# %(processName)s  进程名
# %(thread)d       线程id
# %(threadName)s   线程名
#----------------------------
[formatters]
keys=form01

[formatter_form01]
format=%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s - %(message)s



# ==========使用方法==========
# import logging
# import logging.config
# # 需要使用日志模块logging之前，加载配置文件，创建logger
# # 配置文件
# logging.config.fileConfig('node_logging.conf')
# # 创建 logger
# logger = logging.getLogger('node_logger')
#
#
# def test():
#     logger.debug('debug message conf')
#     logger.info('info message conf')
#     logger.warning('warn message conf')
#     logger.error('error message conf')
#
#
# if __name__ == '__main__':
#     test()

